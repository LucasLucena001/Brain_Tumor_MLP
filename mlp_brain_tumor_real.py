"""
Gerador de Gr√°ficos Individuais para Relat√≥rio
Classifica√ß√£o de Tumores Cerebrais usando MLP
"""

import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
from brain_tumor_mlp import BrainTumorMLPClassifier

# Configurar estilo
plt.style.use('default')
sns.set_palette("husl")
plt.rcParams['figure.figsize'] = (10, 8)
plt.rcParams['font.size'] = 12

class GeradorGraficosIndividuais:
    def __init__(self):
        self.classifier = BrainTumorMLPClassifier(img_size=(64, 64))
        self.resultados = {}
        
    def executar_analise_completa(self):
        """Executa an√°lise completa e coleta resultados"""
        print("üîÑ Executando an√°lise completa...")
        
        # Carregar e analisar dados
        X_train, X_test, y_train, y_test = self.classifier.load_and_preprocess_data()
        dataset_info = self.classifier.analyze_dataset()
        
        # Treinar modelo
        self.classifier.train_mlp(optimize_hyperparameters=False)
        
        # Avaliar modelo
        results = self.classifier.evaluate_model()
        
        # Valida√ß√£o cruzada
        cv_results = self.classifier.cross_validation_analysis()
        
        # An√°lise de features
        importance_map = self.classifier.feature_importance_analysis()
        
        self.resultados = {
            'dataset_info': dataset_info,
            'model_results': results,
            'cv_results': cv_results,
            'importance_map': importance_map
        }
        
        return self.resultados
    
    def grafico_1_distribuicao_dataset(self):
        """Gr√°fico 1: Distribui√ß√£o do Dataset"""
        print("üìä Gerando Gr√°fico 1: Distribui√ß√£o do Dataset...")
        
        dataset_info = self.resultados['dataset_info']
        
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
        
        # Gr√°fico de barras
        classes = dataset_info['Classe']
        treino = dataset_info['Treinamento']
        teste = dataset_info['Teste']
        
        x = np.arange(len(classes))
        width = 0.35
        
        bars1 = ax1.bar(x - width/2, treino, width, label='Treinamento', 
                       color='skyblue', alpha=0.8)
        bars2 = ax1.bar(x + width/2, teste, width, label='Teste', 
                       color='lightcoral', alpha=0.8)
        
        ax1.set_title('Distribui√ß√£o das Classes por Conjunto', fontsize=16, fontweight='bold')
        ax1.set_xlabel('Classes')
        ax1.set_ylabel('N√∫mero de Imagens')
        ax1.set_xticks(x)
        ax1.set_xticklabels(classes)
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        # Adicionar valores nas barras
        for bar in bars1:
            height = bar.get_height()
            ax1.text(bar.get_x() + bar.get_width()/2., height + 20,
                    f'{int(height)}', ha='center', va='bottom', fontweight='bold')
        
        for bar in bars2:
            height = bar.get_height()
            ax1.text(bar.get_x() + bar.get_width()/2., height + 5,
                    f'{int(height)}', ha='center', va='bottom', fontweight='bold')
        
        # Gr√°fico de pizza
        total = dataset_info['Total']
        colors = ['#FF9999', '#66B2FF', '#99FF99', '#FFCC99']
        
        wedges, texts, autotexts = ax2.pie(total, labels=classes, autopct='%1.1f%%', 
                                          colors=colors, startangle=90)
        ax2.set_title('Distribui√ß√£o Total das Classes', fontsize=16, fontweight='bold')
        
        # Melhorar apar√™ncia do texto
        for autotext in autotexts:
            autotext.set_color('black')
            autotext.set_fontweight('bold')
        
        plt.tight_layout()
        plt.savefig('grafico_01_distribuicao_dataset.png', dpi=300, bbox_inches='tight')
        plt.show()
        
        return dataset_info
    
    def grafico_2_performance_modelo(self):
        """Gr√°fico 2: Performance do Modelo"""
        print("üìà Gerando Gr√°fico 2: Performance do Modelo...")
        
        results = self.resultados['model_results']
        
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
        
        # Acur√°cias
        metricas = ['Acur√°cia\nTreinamento', 'Acur√°cia\nTeste']
        valores = [results['train_accuracy'], results['test_accuracy']]
        cores = ['lightgreen', 'orange']
        
        bars = ax1.bar(metricas, valores, color=cores, alpha=0.8, width=0.6)
        ax1.set_title('Acur√°cia do Modelo', fontsize=16, fontweight='bold')
        ax1.set_ylabel('Acur√°cia')
        ax1.set_ylim(0, 1)
        ax1.grid(True, alpha=0.3)
        
        # Adicionar valores
        for bar, valor in zip(bars, valores):
            ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.02, 
                    f'{valor:.3f}\n({valor*100:.1f}%)', ha='center', va='bottom', 
                    fontweight='bold', fontsize=11)
        
        # M√©tricas por classe
        metrics_df = results['metrics_df']
        
        x = np.arange(len(metrics_df))
        width = 0.25
        
        ax2.bar(x - width, metrics_df['Precis√£o'], width, label='Precis√£o', alpha=0.8)
        ax2.bar(x, metrics_df['Recall'], width, label='Recall', alpha=0.8)
        ax2.bar(x + width, metrics_df['F1-Score'], width, label='F1-Score', alpha=0.8)
        
        ax2.set_title('M√©tricas por Classe', fontsize=16, fontweight='bold')
        ax2.set_xlabel('Classes')
        ax2.set_ylabel('Score')
        ax2.set_xticks(x)
        ax2.set_xticklabels(metrics_df['Classe'], rotation=45)
        ax2.legend()
        ax2.grid(True, alpha=0.3)
        ax2.set_ylim(0, 1)
        
        plt.tight_layout()
        plt.savefig('grafico_02_performance_modelo.png', dpi=300, bbox_inches='tight')
        plt.show()
        
        return results
    
    def grafico_3_matriz_confusao(self):
        """Gr√°fico 3: Matriz de Confus√£o"""
        print("üéØ Gerando Gr√°fico 3: Matriz de Confus√£o...")
        
        results = self.resultados['model_results']
        cm = results['confusion_matrix']
        classes = self.classifier.label_encoder.classes_
        
        plt.figure(figsize=(10, 8))
        
        # Criar heatmap
        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', 
                   xticklabels=classes, yticklabels=classes,
                   cbar_kws={'label': 'N√∫mero de Predi√ß√µes'})
        
        plt.title('Matriz de Confus√£o - Classifica√ß√£o de Tumores Cerebrais', 
                 fontsize=16, fontweight='bold', pad=20)
        plt.xlabel('Classe Predita', fontsize=14)
        plt.ylabel('Classe Real', fontsize=14)
        
        # Adicionar estat√≠sticas
        accuracy = np.trace(cm) / np.sum(cm)
        plt.figtext(0.02, 0.02, f'Acur√°cia Geral: {accuracy:.3f} ({accuracy*100:.1f}%)', 
                   fontsize=12, bbox=dict(boxstyle="round,pad=0.3", facecolor="lightblue"))
        
        plt.tight_layout()
        plt.savefig('grafico_03_matriz_confusao.png', dpi=300, bbox_inches='tight')
        plt.show()
        
        return cm
    
    def grafico_4_validacao_cruzada(self):
        """Gr√°fico 4: Resultados da Valida√ß√£o Cruzada"""
        print("üîÑ Gerando Gr√°fico 4: Valida√ß√£o Cruzada...")
        
        cv_results = self.resultados['cv_results']
        
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
        
        # Boxplot
        cv_data = [cv_results['Acur√°cia'], cv_results['Precis√£o'], 
                  cv_results['Recall'], cv_results['F1-Score']]
        labels = ['Acur√°cia', 'Precis√£o', 'Recall', 'F1-Score']
        
        bp = ax1.boxplot(cv_data, labels=labels, patch_artist=True)
        
        colors = ['lightblue', 'lightgreen', 'lightcoral', 'lightyellow']
        for patch, color in zip(bp['boxes'], colors):
            patch.set_facecolor(color)
            patch.set_alpha(0.8)
        
        ax1.set_title('Distribui√ß√£o das M√©tricas - Valida√ß√£o Cruzada 5-Fold', 
                     fontsize=14, fontweight='bold')
        ax1.set_ylabel('Score')
        ax1.grid(True, alpha=0.3)
        ax1.set_ylim(0, 1)
        
        # Gr√°fico de linha com m√©dias
        means = [np.mean(data) for data in cv_data]
        stds = [np.std(data) for data in cv_data]
        
        ax2.errorbar(range(len(labels)), means, yerr=stds, 
                    marker='o', markersize=8, capsize=5, capthick=2, linewidth=2)
        ax2.set_title('M√©dias e Desvios Padr√£o - Valida√ß√£o Cruzada', 
                     fontsize=14, fontweight='bold')
        ax2.set_xticks(range(len(labels)))
        ax2.set_xticklabels(labels)
        ax2.set_ylabel('Score')
        ax2.grid(True, alpha=0.3)
        ax2.set_ylim(0, 1)
        
        # Adicionar valores
        for i, (mean, std) in enumerate(zip(means, stds)):
            ax2.text(i, mean + std + 0.02, f'{mean:.3f}¬±{std:.3f}', 
                    ha='center', va='bottom', fontweight='bold')
        
        plt.tight_layout()
        plt.savefig('grafico_04_validacao_cruzada.png', dpi=300, bbox_inches='tight')
        plt.show()
        
        return cv_results
    
    def grafico_5_arquitetura_mlp(self):
        """Gr√°fico 5: Arquitetura do MLP"""
        print("üß† Gerando Gr√°fico 5: Arquitetura do MLP...")
        
        fig, ax = plt.subplots(figsize=(14, 8))
        
        # Definir arquitetura
        layers = [12288, 200, 100, 50, 4]
        layer_names = ['INPUT\n64√ó64√ó3\n(12,288 neur√¥nios)', 'HIDDEN 1\n(200 neur√¥nios)', 
                      'HIDDEN 2\n(100 neur√¥nios)', 'HIDDEN 3\n(50 neur√¥nios)', 
                      'OUTPUT\n(4 classes)']
        colors = ['#FFE4B5', '#E6F3FF', '#E6F3FF', '#E6F3FF', '#E6FFE6']
        
        # Posi√ß√µes
        x_positions = np.linspace(1, 13, len(layers))
        y_center = 4
        
        # Desenhar camadas
        for i, (x, neurons, name, color) in enumerate(zip(x_positions, layers, layer_names, colors)):
            # Ret√¢ngulo da camada
            width = 1.8
            height = 2
            rect = plt.Rectangle((x-width/2, y_center-height/2), width, height, 
                               facecolor=color, edgecolor='black', linewidth=2)
            ax.add_patch(rect)
            
            # Texto da camada
            ax.text(x, y_center, name, ha='center', va='center', 
                   fontsize=10, fontweight='bold', wrap=True)
            
            # Setas entre camadas
            if i < len(layers) - 1:
                ax.arrow(x + width/2, y_center, x_positions[i+1] - x - width, 0, 
                        head_width=0.2, head_length=0.3, fc='gray', ec='gray', linewidth=2)
        
        # Configura√ß√µes t√©cnicas
        config_text = """CONFIGURA√á√ïES T√âCNICAS:
‚Ä¢ Fun√ß√£o de Ativa√ß√£o: ReLU
‚Ä¢ Regulariza√ß√£o: L2 (Œ± = 0.001)
‚Ä¢ Otimizador: Adam
‚Ä¢ Learning Rate: Adaptativo
‚Ä¢ Early Stopping: Habilitado
‚Ä¢ Max Itera√ß√µes: 1000
‚Ä¢ Valida√ß√£o: 10% dos dados"""
        
        ax.text(1, 1.5, config_text, fontsize=11, 
               bbox=dict(boxstyle="round,pad=0.5", facecolor="lightgray", alpha=0.8))
        
        ax.set_xlim(0, 14)
        ax.set_ylim(0, 6)
        ax.set_title('Arquitetura do Multi-Layer Perceptron (MLP)', 
                    fontsize=16, fontweight='bold', pad=20)
        ax.axis('off')
        
        plt.tight_layout()
        plt.savefig('grafico_05_arquitetura_mlp.png', dpi=300, bbox_inches='tight')
        plt.show()
    
    def grafico_6_comparacao_algoritmos(self):
        """Gr√°fico 6: Compara√ß√£o com Outros Algoritmos"""
        print("‚öñÔ∏è Gerando Gr√°fico 6: Compara√ß√£o de Algoritmos...")
        
        # Dados simulados (voc√™ pode executar advanced_analysis.py para dados reais)
        results = self.resultados['model_results']
        mlp_accuracy = results['test_accuracy']
        
        algoritmos = ['MLP\n(Nosso Modelo)', 'Random Forest', 'SVM\n(RBF)', 'Logistic\nRegression']
        acuracias = [mlp_accuracy, 0.82, 0.78, 0.75]  # Valores estimados para compara√ß√£o
        cores = ['gold', 'lightblue', 'lightgreen', 'lightcoral']
        
        fig, ax = plt.subplots(figsize=(12, 8))
        
        bars = ax.bar(algoritmos, acuracias, color=cores, alpha=0.8, width=0.6)
        
        # Destacar nosso modelo
        bars[0].set_edgecolor('red')
        bars[0].set_linewidth(3)
        
        ax.set_title('Compara√ß√£o de Performance entre Algoritmos', 
                    fontsize=16, fontweight='bold', pad=20)
        ax.set_ylabel('Acur√°cia', fontsize=14)
        ax.set_ylim(0, 1)
        ax.grid(True, alpha=0.3, axis='y')
        
        # Adicionar valores nas barras
        for bar, acc in zip(bars, acuracias):
            ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.02, 
                   f'{acc:.3f}\n({acc*100:.1f}%)', ha='center', va='bottom', 
                   fontweight='bold', fontsize=12)
        
        # Adicionar linha de refer√™ncia
        ax.axhline(y=0.8, color='red', linestyle='--', alpha=0.7, 
                  label='Threshold Cl√≠nico (80%)')
        ax.legend()
        
        # Nota explicativa
        ax.text(0.02, 0.98, 'Nota: Valores de compara√ß√£o s√£o estimados para demonstra√ß√£o', 
               transform=ax.transAxes, fontsize=10, style='italic', 
               bbox=dict(boxstyle="round,pad=0.3", facecolor="lightyellow", alpha=0.8),
               verticalalignment='top')
        
        plt.tight_layout()
        plt.savefig('grafico_06_comparacao_algoritmos.png', dpi=300, bbox_inches='tight')
        plt.show()
        
        return acuracias
    
    def gerar_todos_graficos(self):
        """Gera todos os gr√°ficos individuais"""
        print("üé® GERANDO TODOS OS GR√ÅFICOS INDIVIDUAIS")
        print("="*50)
        
        # Executar an√°lise completa
        self.executar_analise_completa()
        
        # Gerar gr√°ficos
        graficos = [
            self.grafico_1_distribuicao_dataset,
            self.grafico_2_performance_modelo,
            self.grafico_3_matriz_confusao,
            self.grafico_4_validacao_cruzada,
            self.grafico_5_arquitetura_mlp,
            self.grafico_6_comparacao_algoritmos
        ]
        
        resultados_graficos = {}
        
        for i, grafico_func in enumerate(graficos, 1):
            print(f"\nüìä Processando Gr√°fico {i}/6...")
            resultado = grafico_func()
            resultados_graficos[f'grafico_{i}'] = resultado
        
        print("\n‚úÖ TODOS OS GR√ÅFICOS GERADOS COM SUCESSO!")
        print("\nüìÅ Arquivos criados:")
        arquivos_gerados = [
            'grafico_01_distribuicao_dataset.png',
            'grafico_02_performance_modelo.png', 
            'grafico_03_matriz_confusao.png',
            'grafico_04_validacao_cruzada.png',
            'grafico_05_arquitetura_mlp.png',
            'grafico_06_comparacao_algoritmos.png'
        ]
        
        for arquivo in arquivos_gerados:
            if os.path.exists(arquivo):
                print(f"‚úÖ {arquivo}")
            else:
                print(f"‚ùå {arquivo}")
        
        return resultados_graficos

def main():
    """Fun√ß√£o principal"""
    gerador = GeradorGraficosIndividuais()
    resultados = gerador.gerar_todos_graficos()
    
    print(f"\nüéâ PROCESSO CONCLU√çDO!")
    print("Os gr√°ficos est√£o prontos para uso no seu v√≠deo e relat√≥rio.")

if __name__ == "__main__":
    main()